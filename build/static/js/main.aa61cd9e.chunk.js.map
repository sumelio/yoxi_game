{"version":3,"sources":["assets/sound/intro.mp3","assets/image/arrow-next.png","assets/sound/menu.mp3","components/menu-item/index.js","components/vowel/index.js","pages/intro/index.js","pages/menu-game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItem","className","href","this","props","label","Component","Vowel","IntroPage","UIfx","IntroAudio","volume","play","to","src","arrowNext","MenuGame","beep","setVolume","console","log","App","id","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mVCkB5BC,G,6LAZX,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,uBACb,uBAAGC,KAAK,qBAAqBD,UAAU,gBACpCE,KAAKC,MAAMC,a,GANDC,cCYRC,G,uLAVX,OACE,yBAAKN,UAAU,SACb,6BACKE,KAAKC,MAAMC,Y,GALJC,c,iBC0BLE,E,iLAbX,OAJa,IAAIC,IAAKC,IAAY,CAAEC,OAAQ,KAEvCC,OAGD,yBAAMX,UAAU,0BAChB,kBAAC,EAAD,CAAOI,MAAM,MACb,kBAAC,EAAD,CAAOA,MAAM,MACb,kBAAC,EAAD,CAAOA,MAAM,MACb,kBAAC,EAAD,CAAOA,MAAM,MACb,kBAAC,EAAD,CAAOA,MAAM,MACb,kBAAC,IAAD,CAAMQ,GAAG,cAAa,yBAAKC,IAAKC,IAAWd,UAAU,oB,GAbrCK,a,iBCmBTU,G,uLApBX,IAAMC,EAAO,IAAIR,IAAKC,IAAY,CAAEC,OAAQ,KAC5CM,EAAKC,UAAU,IACfC,QAAQC,IAAI,OAAQH,GAQpB,OAFAA,EAAKL,OAGD,yBAAMX,UAAU,yBAChB,kBAAC,EAAD,CAAYI,MAAM,2BAClB,kBAAC,EAAD,CAAWA,MAAM,yBACjB,kBAAC,EAAD,CAAWA,MAAM,sB,GAhBFC,cCWRe,EAVH,SAAAjB,GAAK,OACf,kBAAC,IAAD,KACE,yBAAKkB,GAAG,UACN,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,aAAaC,UAAWT,OCD5BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aa61cd9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/intro.0be82ec1.mp3\";","module.exports = __webpack_public_path__ + \"static/media/arrow-next.37e34e13.png\";","module.exports = __webpack_public_path__ + \"static/media/menu.71efb88d.mp3\";","import React, { Component } from \"react\";\n\nimport './index.css'\n\nclass MenuItem extends Component {\n  render() {\n    return (\n      <div className=\"round-button\">\n        <div className=\"round-button-circle\">\n          <a href=\"http://example.com\" className=\"round-button\">\n            {this.props.label}\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MenuItem;\n","import React, { Component } from \"react\";\n\nimport './index.css'\n\nclass Vowel extends Component {\n  render() {\n    return (\n      <div className=\"vowel\">\n        <div >\n            {this.props.label}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Vowel;\n","import React, { Component } from \"react\";\nimport UIfx from 'uifx'\n\n\nimport IntroAudio from '../../assets/sound/intro.mp3'\nimport './index.css'\nimport MenuItem from \"../../components/menu-item\";\nimport Vowel from \"../../components/vowel\";\nimport arrowNext from '../../assets/image/arrow-next.png';\nimport { Link } from \"react-router-dom\";\n\nclass IntroPage extends Component {\n  render() {\n    const beep = new UIfx(IntroAudio, { volume: 0.9 });\n\n    beep.play();\n    \n    return (\n        <div  className=\"content-menu top-700px\">\n        <Vowel label=\"a\" />\n        <Vowel label=\"e\" />\n        <Vowel label=\"i\" />\n        <Vowel label=\"o\" />\n        <Vowel label=\"u\" />\n        <Link to=\"/menu-game\"><img src={arrowNext} className=\"arrowNext\" /></Link>\n      </div>\n    );\n  }\n}\n\nexport default IntroPage;\n","import React, { Component } from \"react\";\nimport UIfx from 'uifx'\n\n\nimport IntroAudio from '../../assets/sound/menu.mp3'\nimport './index.css'\nimport MenuItem from \"../../components/menu-item\";\n\nclass MenuGame extends Component {\n  render() {\n    const beep = new UIfx(IntroAudio, { volume: 0.9 });\n    beep.setVolume(0.9);\n    console.log(\"beep\", beep);\n  \n    const handlePlay = () => {\n      beep.play();\n    };\n  \n    beep.play();\n    \n    return (\n        <div  className=\"content-menu top-20px\">\n        <MenuItem   label=\"Descubra vocal inicial\"/>\n        <MenuItem  label=\"Descubra vocal final\" />\n        <MenuItem  label=\"Rima rimando\" />\n      </div>\n    );\n  }\n}\n\nexport default MenuGame;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport IntroPage from \"./pages/intro\";\nimport MenuGame from \"./pages/menu-game\";\n\n\n\n\nconst App = props => (\n  <BrowserRouter>\n    <div id=\"margen\">\n      <Route exact path=\"/\" component={IntroPage} />\n      <Route exact path=\"/menu-game\" component={MenuGame} />\n    </div>\n  </BrowserRouter>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}